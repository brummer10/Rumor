

/*******************************************************************************
**************************** File generated by *********************************
********************************************************************************
 ./build-plug.py -i Ruiner.sch -t 1 -T -b
*******************************************************************************/

// generated automatically
// DO NOT MODIFY!
declare id "rumor";
declare name "rumor";
declare category "Extern";
declare shortname "rumor";
declare description "rumor";

import("stdfaust.lib");

/*******************************************************************************
  * 1-dimensional function table for linear interpolation
*******************************************************************************/
rd = library("reducemaps.lib");

//-- Rdtable from waveform
rtable(table, r) = (table, int(r)):rdtable;

//-- Copy the sign of x to f
ccopysign(f, x) = ma.fabs(f) * sign(x);

//-- Get sign of value x
sign(x) = x<0, 1, -1 : select2;

//-- Check if value x is negative
fsignbit(x) = x<0;

//-- Get fractal part of value n
fractal(n) = n - int(n);

//-- Interpolate value between i and i+1 in table with fractal coefficient f.
interpolation(table, size, f, i) = select2(i<0,select2(i>size-2,
    rtable(table, i)*(1-f) + rtable(table,i+1)*f, rtable(table, size-1)),
    rtable(table, 0));

//-- reduce dc-offset (noise) from table response for very low values
table_gate(table,x) = select2(ma.fabs(x):rd.maxn(4096)<ma.fabs(rtable(table, 1))*(0.12), x, x*x*x);

//-- Linear interpolation for value x in rdtable
circuit_response(table, low, high, step, size, x) =
    interpolation(table, size, fractal(linindex(step, x)),
    int(linindex(step, x))), x : ccopysign;

//-- Calculate linear table index for value x
linindex(step, x) = ma.fabs(x) * step;

//-- predefined filterbank 
freq_split = fi.filterbank(3, (86.0,210.0,1200.0,6531.0));



/****************************************************************************************
* rumor_table generated by DK/circ_table_gen.py -- do not modify manually
****************************************************************************************/

 // variables used
 // --sig_max  1.400000
 // --table_div  3.393005
 // --table_op  1.000000

rumor_clip = circuit_response(rumor_table, low, high, step, size) with{

    low = 0;
    high =0.833333;
    step =142.143;
    size =200;

    rumor_table = waveform {
    0.000000000000,0.001179247307,0.005700404200,0.013696114078,0.023372061838,
    0.033432794676,0.043461811993,0.053388498434,0.063206993536,0.072917985483,
    0.082522533444,0.092021701974,0.101416548612,0.110708139580,0.119897750725,
    0.128986887338,0.137976888372,0.146868847166,0.155663806805,0.164362801522,
    0.172966854232,0.181476976838,0.189894170368,0.198219425108,0.206453720733,
    0.214598026432,0.222653301025,0.230620493087,0.238500541057,0.246294373355,
    0.254002908490,0.261627055172,0.269167712416,0.276625769647,0.284002106808,
    0.291297594461,0.298513093886,0.305649457186,0.312707527379,0.319688138504,
    0.326592115711,0.333420275357,0.340173425105,0.346852364012,0.353457882624,
    0.359990763066,0.366451779133,0.372841696377,0.379161272199,0.385411255930,
    0.391592388924,0.397705404640,0.403751028723,0.409729979096,0.415642966031,
    0.421490692243,0.427273852959,0.432993136006,0.438649221887,0.444242783860,
    0.449774488011,0.455244993338,0.460654951821,0.466005008498,0.471295801539,
    0.476527962321,0.481702115497,0.486818879071,0.491878864466,0.496882676597,
    0.501830913938,0.506724168591,0.511563026356,0.516348066795,0.521079863300,
    0.525758983159,0.530385987621,0.534961431958,0.539485865535,0.543959831863,
    0.548383868671,0.552758507962,0.557084276074,0.561361693746,0.565591276168,
    0.569773533050,0.573908968673,0.577998081951,0.582041366486,0.586039310626,
    0.589992397521,0.593901105176,0.597765906508,0.601587269401,0.605365656755,
    0.609101526546,0.612795331873,0.616447521011,0.620058537463,0.623628820013,
    0.627158802772,0.630648915230,0.634099582305,0.637511224392,0.640884257411,
    0.644219092854,0.647516137833,0.650775795125,0.653998463223,0.657184536373,
    0.660334404627,0.663448453885,0.666527065939,0.669570618516,0.672579485321,
    0.675554036085,0.678494636598,0.681401648760,0.684275430616,0.687116336403,
    0.689924716583,0.692700917890,0.695445283366,0.698158152402,0.700839860776,
    0.703490740691,0.706111120814,0.708701326313,0.711261678897,0.713792496847,
    0.716294095057,0.718766785071,0.721210875114,0.723626670131,0.726014471821,
    0.728374578671,0.730707285991,0.733012885948,0.735291667597,0.737543916918,
    0.739769916846,0.741969947304,0.744144285236,0.746293204636,0.748416976584,
    0.750515869273,0.752590148041,0.754640075401,0.756665911073,0.758667912011,
    0.760646332435,0.762601423857,0.764533435114,0.766442612393,0.768329199259,
    0.770193436687,0.772035563085,0.773855814323,0.775654423761,0.777431622274,
    0.779187638282,0.780922697769,0.782637024317,0.784330839128,0.786004361046,
    0.787657806589,0.789291389968,0.790905323116,0.792499815706,0.794075075183,
    0.795631306783,0.797168713555,0.798687496389,0.800187854035,0.801669983128,
    0.803134078210,0.804580331752,0.806008934176,0.807420073876,0.808813937243,
    0.810190708681,0.811550570633,0.812893703599,0.814220286159,0.815530494989,
    0.816824504887,0.818102488790,0.819364617792,0.820611061169,0.821841986392,
    0.823057559150,0.824257943370,0.825443301233,0.826613793191,0.827769577993,
    0.828910812693,0.830037652677,0.831150251674,0.832248761780,0.833333333468
    };
};

/*******************************************************************************
  * rumor_p1 generated by dkbuiler from Ruiner_p1.sch
*******************************************************************************/

p1 = pre : fi.tf21(b0/a0,b1/a0,b2/a0,a1/a0,a2/a0) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Intensity = vslider("Intensity[name:Intensity][style:knob]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(3) : si.smooth(s);

    b0 = -3.68740380275009e-5*fs;

    b1 = 0.68740380275009e-5;

    b2 = 3.68740380275009e-5*fs;

    a0 = Intensity*fs*(3.23341146638826e-10*fs + 1.83849807717545e-6) + fs*(2.50211256782905e-10*fs + 1.41841347670627e-7) + 9.19249038587725e-5;

    a1 = -6.46682293277652e-10*Intensity*pow(fs,2) - 5.0042251356581e-10*pow(fs,2) + 0.000183849807717545;

    a2 = Intensity*fs*(3.23341146638826e-10*fs - 1.83849807717545e-6) + fs*(2.50211256782905e-10*fs - 1.41841347670627e-7) + 9.19249038587725e-5;
};


/*******************************************************************************
  * rumor_p2 generated by dkbuiler from Ruiner_p2.sch
*******************************************************************************/

p2 = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;


    Volume = vslider("Volume[name:Volume][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(3) : si.smooth(s);

    b0 = -1.16796031265384e-9*Volume*pow(fs,2) - 2.33592062530768e-13*pow(fs,2);

    b1 = 1.16796031265384e-9*Volume*pow(fs,2) + 2.33592062530768e-13*pow(fs,2);

    b2 = 1.16796031265384e-9*Volume*pow(fs,2) + 2.33592062530768e-13*pow(fs,2);

    b3 = -1.16796031265384e-9*Volume*pow(fs,2) - 2.33592062530768e-13*pow(fs,2);

    a0 = Volume*(Volume*fs*(fs*(-3.96263655940387e-15*fs - 2.5024049214879e-12) - 2.91165940049241e-9) + fs*(fs*(3.96184403209199e-15*fs + 2.58115717169168e-12) + 2.94122192432324e-9) + 2.91165940049241e-8) + fs*(fs*(7.92765070074338e-15*fs + 5.16483259885109e-12) + 5.88536153701812e-9) + 5.82390113286491e-8;

    a1 = Volume*(Volume*fs*(fs*(1.18879096782116e-14*fs + 2.5024049214879e-12) - 2.91165940049241e-9) + fs*(fs*(-1.1885532096276e-14*fs - 2.58115717169168e-12) + 2.94122192432324e-9) + 8.73497820147722e-8) + fs*(fs*(-2.37829521022301e-14*fs - 5.16483259885109e-12) + 5.88536153701812e-9) + 1.74717033985947e-7;

    a2 = Volume*(Volume*fs*(fs*(-1.18879096782116e-14*fs + 2.5024049214879e-12) + 2.91165940049241e-9) + fs*(fs*(1.1885532096276e-14*fs - 2.58115717169168e-12) - 2.94122192432324e-9) + 8.73497820147722e-8) + fs*(fs*(2.37829521022301e-14*fs - 5.16483259885109e-12) - 5.88536153701812e-9) + 1.74717033985947e-7;

    a3 = Volume*(Volume*fs*(fs*(3.96263655940387e-15*fs - 2.5024049214879e-12) + 2.91165940049241e-9) + fs*(fs*(-3.96184403209199e-15*fs + 2.58115717169168e-12) - 2.94122192432324e-9) + 2.91165940049241e-8) + fs*(fs*(-7.92765070074338e-15*fs + 5.16483259885109e-12) - 5.88536153701812e-9) + 5.82390113286491e-8;
};
    
rumorclip = ffunction(float rumorclip(float), "rumor_table.h", "");

ts9 = _ <: _ - rumorclip(p1-_) :> _;

process = ts9 : + ~  (*(0.666) : rumorclip : fi.allpassn(4,(-0.2, 0.3, 0.4, 0.5))) :  *(Volume) with {
    Volume = hslider("level[name:Volume]", 0.5, 0, 1, 0.01) : si.smooth(0.993);
};
